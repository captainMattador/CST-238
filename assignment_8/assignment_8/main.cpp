

/*
 Assignment: Assignment 8 - Analyzing quickSort's Recursion Limits
 File - main.cpp
 Developer:  Matthew Bozelka
 Teacher: Anand Venkataraman
 Program purpose: To test the optimal recursion limit used in a quicksort.
 */

#include <iostream>
using namespace std;
#include "FHsort.h"
#include "FHvector.h"

// helper function for generating a random number
int randomNum(const int & generateBetween);

// quickSortX internal
template <typename Comparable>
void quickSortX(FHvector<Comparable> & a, int left, int right, int rec_limit)
{
   Comparable pivot;
   int i, j;

   if( left + rec_limit <= right )
   {
      pivot = median3(a, left, right);
      for(i = left, j = right - 1; ; )
      {
         while( a[++i] < pivot )
            ;
         while( pivot < a[--j])
            ;
         if(i < j)
            mySwapFH(a[i], a[j]);
         else
            break;
      }

      mySwapFH(a[i], a[right - 1]);  // restore pivot

      // recursive calls on smaller sub-groups
      quickSortX(a, left, i - 1, rec_limit);
      quickSortX(a, i + 1, right, rec_limit);
   }
   else
      // non-recursive escape valve - insertionSort
      insertionSort(a, left, right);
}

// quickSortX public driver
template <typename Comparable>
void quickSortX( FHvector<Comparable> & a,  int rec_limit )
{
   int limit = (rec_limit < 2) ? 2 : rec_limit;
   quickSortX(a, 0, a.size() - 1, limit);
}


int main() {

   #define ARRAY_SIZE 40000
   FHvector<int> randomInts;
   FHvector<int> fhVectorOfInts;
   int i;
   clock_t startTime, stopTime;

   // create a vector of random ints
   for(i = 0; i < ARRAY_SIZE; ++i){
      randomInts.push_back( randomNum(ARRAY_SIZE) );
   }

   for(i = 2; i <= 300; i+=2){

      fhVectorOfInts = randomInts;

      // start clock
      startTime = clock();

      // kick of quickSortX at recursion limit i
      quickSortX(fhVectorOfInts, i);

      //stop clock
      stopTime = clock();

      cout << "* recursion limit: " << i << " * time: "
           << (double)(stopTime - startTime)/(double)CLOCKS_PER_SEC
           << " *" << endl << endl;
   }

   return 0;
}


int randomNum(const int & generateBetween)
{

   srand (time(NULL) + rand( ));
   return rand() % generateBetween;

}

// analysis
/*

 After graphing out my numbers the range that seems to be minimal and flat
 is between 6 and 25. The best out of that range on each run is roughly between 
 10 and 18 with around 12 to 15 usually being the fastest in my runs. After the 
 minimal range the time grows steadily as the recusion limit increases. My 
 findings seem to agree with the weeks readings on optimal recursion limits.
 
 */

// table output
/*

 *****************************************************************************
     | 40,000 ints | 100,000 ints | 210,000 ints | 275,000 ints | 333,000 ints
 *****************************************************************************
 002 | 0.00913s    | 0.027629s    | 0.058461s    | 0.082268s    | 0.099529s
 *****************************************************************************
 006 | 0.008792s   | 0.025125s    | 0.057544s    | 0.077249s    | 0.093048s
 *****************************************************************************
 008 | 0.009289s   | 0.025272s    | 0.061751s    | 0.080702s    | 0.089087s
 *****************************************************************************
 010 | 0.009707s   | 0.027136s    | 0.059597s    | 0.074083s    | 0.091599s
 *****************************************************************************
 012 | 0.009068s   | 0.024677s    | 0.054293s    | 0.07862s     | 0.094998s
 *****************************************************************************
 014 | 0.008987s   | 0.026561s    | 0.063339s    | 0.078643s    | 0.092116s
 *****************************************************************************
 018 | 0.009618s   | 0.025978s    | 0.060647s    | 0.074921s    | 0.096709s
 *****************************************************************************
 022 | 0.010041s   | 0.02491s     | 0.059057s    | 0.085746s    | 0.09409s
 *****************************************************************************
 024 | 0.010041s   | 0.025938s    | 0.058664s    | 0.081256s    | 0.096902s
 *****************************************************************************
 028 | 0.010041s   | 0.025872s    | 0.062636s    | 0.08553s     | 0.100985s
 *****************************************************************************
 032 | 0.010041s   | 0.028948s    | 0.062709s    | 0.079106s    | 0.103909s
 *****************************************************************************
 036 | 0.010041s   | 0.027415s    | 0.068035s    | 0.087s       | 0.113044s
 *****************************************************************************
 040 | 0.010041s   | 0.028197s    | 0.067663s    | 0.09103s     | 0.107581s
 *****************************************************************************
 046 | 0.012243s   | 0.031893s    | 0.068304s    | 0.088629s    | 0.108267s
 *****************************************************************************
 056 | 0.012243s   | 0.033136s    | 0.074652s    | 0.094308s    | 0.119562s
 *****************************************************************************
 062 | 0.013388s   | 0.038458s    | 0.075045s    | 0.102417s    | 0.123084s
 *****************************************************************************
 070 | 0.015336s   | 0.037864s    | 0.08197s     | 0.108246s    | 0.135861s
 *****************************************************************************
 090 | 0.015545s   | 0.038122s    | 0.087192s    | 0.114972s    | 0.138932s
 *****************************************************************************
 102 | 0.016041s   | 0.041949s    | 0.092529s    | 0.119009s    | 0.155009s
 *****************************************************************************
 112 | 0.018528s   | 0.04717s     | 0.099349s    | 0.12464s     | 0.159375s
 *****************************************************************************
 122 | 0.020361s   | 0.045212s    | 0.103003s    | 0.137837s    | 0.16723s
 *****************************************************************************
 132 | 0.018103s   | 0.048483s    | 0.106007s    | 0.144849s    | 0.176672s
 *****************************************************************************
 142 | 0.022138s   | 0.053251s    | 0.120851s    | 0.15313s     | 0.183828s
 *****************************************************************************
 156 | 0.024339s   | 0.05319s     | 0.122036s    | 0.155445s    | 0.192549s
 *****************************************************************************
 164 | 0.025121s   | 0.057364s    | 0.124107s    | 0.160311s    | 0.20487s
 *****************************************************************************
 184 | 0.026241s   | 0.060139s    | 0.138568s    | 0.185631s    | 0.209956s
 *****************************************************************************
 194 | 0.028811s   | 0.068357s    | 0.141439s    | 0.188568s    | 0.215483s
 *****************************************************************************
 216 | 0.030956s   | 0.068131s    | 0.146575s    | 0.200612s    | 0.24002s
 *****************************************************************************
 236 | 0.033355s   | 0.073037s    | 0.162232s    | 0.218045s    | 0.254628s
 *****************************************************************************
 248| 0.033499s    | 0.077104s    | 0.168614s    | 0.215654s    | 0.256746s
 *****************************************************************************
 250| 0.029644s    | 0.074559s    | 0.170732s    | 0.220215s    | 0.260766s
 *****************************************************************************
 264| 0.036369s    | 0.08081s     | 0.174925s    | 0.227314s    | 0.277642s
 *****************************************************************************
 274| 0.035997s    | 0.081798s    | 0.184008s    | 0.240344s    | 0.282322s
 *****************************************************************************
 284| 0.035208s    | 0.091786s    | 0.179465s    | 0.242318s    | 0.291773s
 *****************************************************************************
 294| 0.038173s    | 0.085562s    | 0.187925s    | 0.254168s    | 0.293495s
 *****************************************************************************
 300| 0.033789s    | 0.09128s     | 0.192976s    | 0.245763s    | 0.29753s
 *****************************************************************************


 */
